
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from aifc import Error
from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, Tk, Canvas, Entry, Text, Button, PhotoImage
from controller import get_total_class_available,  get_total_class_unavailable

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def dashboard():
    Dashboard()
    
class Dashboard(Frame):
    def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)


        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 500,
            width = 692,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            54.0,
            59.0,
            307.0,
            250.0,
            fill="#EDA2A2",
            outline="")

        self.canvas.create_rectangle(
            54.0,
            268.0,
            307.0,
            459.0,
            fill="#EDA2A2",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            128.0,
            166.0,
            image=self.image_image_1
        )

        self.text_object_classAvailable = self.canvas.create_text(
            213.0,
            120.0,
            anchor="nw",
            text=str(get_total_class_available()),  
            fill="#000000",
            font=("MontserratRoman SemiBold", 60 * -1)
        )

        self.text_object_classUnavailable = self.canvas.create_text(
            206.0,
            325.0,
            anchor="nw",
            text=str(get_total_class_unavailable()),
            fill="#000000",
            font=("MontserratRoman SemiBold", 60 * -1)
        )

        self.canvas.create_text(
            86.0,
            78.0,
            anchor="nw",
            text="No. Class Available",
            fill="#000000",
            font=("InriaSerif Regular", 20 * -1)
        )

        self.canvas.create_text(
            68.0,
            279.0,
            anchor="nw",
            text="No. Class Unavailable",
            fill="#000000",
            font=("InriaSerif Regular", 20 * -1)
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            449.0,
            259.0,
            image=self.image_image_2
        )

        self.canvas.create_text(
            198.0,
            10.0,
            anchor="nw",
            text="Welcome to Dashboard",
            fill="#1D1B1B",
            font=("InriaSerif Bold", 25 * -1)
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            128.0,
            364.0,
            image=self.image_image_3
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.refresh_btn = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_refresh,
            relief="flat"
        )
        self.refresh_btn.place(
            x=476.0,
            y=121.0,
            width=43.0,
            height=39.0
        )
        self.update_text_from_database()
    def update_text_from_database(self):
        try:
            # Update the text on the canvas with the count from the function
            self.canvas.itemconfigure(
                self.text_object_classAvailable, text=str(get_total_class_available())
            )
            self.canvas.itemconfigure(
                self.text_object_classUnavailable, text=str(get_total_class_unavailable())
            )
        except Exception as e:
            print(f"Error: {e}")

    def handle_refresh(self):
        try:
            # Update the text on the canvas with the latest count
            self.update_text_from_database()
        except Error as e:
            print(f"Error: {e}")



    def handle_refresh(self):
        try:
            # Update the text on the canvas with the latest count
            self.update_text_from_database()
        except Error as e:
            print(f"Error: {e}")
    
