
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


#window = Tk()

#window.geometry("692x500")
#window.configure(bg = "#FFFFFF")

def updateClass():
    UpdateClass()


class UpdateClass(Frame):
     def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent

        self.selected_r_id = self.parent.selected_rid

        self.configure(bg = "#FFFFFF")
        
        self.data = {
            "id": StringVar(),
            "subject": StringVar(),
            "teacher": StringVar(),
            "class_time": StringVar(),
            "class_code": StringVar(),
            "lesson": StringVar(),
           "class_availability": StringVar()
        }



        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 500,
            width = 692,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_text(
            285.0,
            20.0,
            anchor="nw",
            text="Update Class",
            fill="#000000",
            font=("InriaSerif Regular", 25 * -1)
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        self.update_btn = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_update,
            relief="flat"
        )
        self.update_btn.place(
            x=432.0,
            y=429.0,
            width=97.0,
            height=43.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.clear_entries,
            relief="flat"
        )
        button_2.place(
            x=540.0,
            y=429.0,
            width=97.0,
            height=43.0
        )

        self.canvas.create_rectangle(
            37.0,
            110.00000000700106,
            239.99999162499807,
            112.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            30.0,
            180.00000000700106,
            232.99999162499807,
            182.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            39.0,
            254.0,
            238.0,
            255.0,
            fill="#FFFFFF",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            261.0,
            37.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            613.0,
            51.0,
            image=self.image_image_2
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("button_3.png"))
        button_3 = Button(
            self,
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: self.parent.navigate("view"),
            relief="flat"
        )
        button_3.place(
            x=545.0,
            y=28.0,
            width=60.0,
            height=41.0
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            502.0,
            246.0,
            image=self.image_image_3
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        image_4 = self.canvas.create_image(
            502.0,
            162.0,
            image=self.image_image_4
        )

        self.image_image_5 = PhotoImage(
            file=relative_to_assets("image_5.png"))
        image_5 = self.canvas.create_image(
            502.0,
            353.0,
            image=self.image_image_5
        )

        self.image_image_6 = PhotoImage(
            file=relative_to_assets("image_6.png"))
        image_6 = self.canvas.create_image(
            185.0,
            271.0,
            image=self.image_image_6
        )

        self.image_image_7 = PhotoImage(
            file=relative_to_assets("image_7.png"))
        image_7 = self.canvas.create_image(
            185.0,
            182.0,
            image=self.image_image_7
        )

        self.image_image_8 = PhotoImage(
            file=relative_to_assets("image_8.png"))
        image_8 = self.canvas.create_image(
            185.0,
            100.0,
            image=self.image_image_8
        )

        self.image_image_9 = PhotoImage(
            file=relative_to_assets("image_9.png"))
        image_9 = self.canvas.create_image(
            233.0,
            402.0,
            image=self.image_image_9
        )

        self.image_image_10 = PhotoImage(
            file=relative_to_assets("image_10.png"))
        image_10 = self.canvas.create_image(
            93.0,
            402.0,
            image=self.image_image_10
        )

        self.image_image_11 = PhotoImage(
            file=relative_to_assets("image_11.png"))
        image_11 = self.canvas.create_image(
            158.0,
            407.0,
            image=self.image_image_11
        )

        self.canvas.create_rectangle(
            55.0,
            123.00000006060282,
            314.9999849651904,
            126.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            55.0,
            206.00000006060282,
            314.9999849651904,
            209.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            360.0,
            192.0,
            637.0,
            194.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            360.0,
            275.0,
            637.0,
            277.0,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            360.0,
            382.0,
            637.0000116107913,
            385.00000000613204,
            fill="#FFFFFF",
            outline="")

        self.canvas.create_rectangle(
            55.0,
            303.0000000606028,
            314.9999849651904,
            306.0,
            fill="#FFFFFF",
            outline="")

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = self.canvas.create_image(
            186.0,
            105.0,
            image=self.entry_image_1
        )
        self.id_text =self.canvas.create_text(
            111.0,
            470.0,
            anchor="nw",
            text="01",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 17 * -1)
        )
        entry_1 = Entry(
            self,
            textvariable=self.data['subject'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=57.0,
            y=89.0,
            width=258.0,
            height=30.0
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            186.0,
            188.0,
            image=self.entry_image_2
        )
        entry_2 = Entry(
            self,
            textvariable=self.data['teacher'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=57.0,
            y=172.0,
            width=258.0,
            height=30.0
        )

        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = self.canvas.create_image(
            499.5,
            169.0,
            image=self.entry_image_3
        )
        entry_3 = Entry(
            self,
            textvariable=self.data['class_time'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_3.place(
            x=362.0,
            y=150.0,
            width=275.0,
            height=36.0
        )

        self.entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = self.canvas.create_image(
            499.5,
            249.0,
            image=self.entry_image_4
        )
        entry_4 = Entry(
            self,
            textvariable=self.data['class_code'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_4.place(
            x=362.0,
            y=237.0,
            width=275.0,
            height=36.0
        )

        self.entry_image_5 = PhotoImage(
            file=relative_to_assets("entry_5.png"))
        entry_bg_5 = self.canvas.create_image(
            499.5,
            358.0,
            image=self.entry_image_5
        )
        entry_5 = Entry(
            self,
            textvariable=self.data['class_availability'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_5.place(
            x=362.0,
            y=341.0,
            width=275.0,
            height=32.0
        )

        self.entry_image_6 = PhotoImage(
            file=relative_to_assets("entry_6.png"))
        entry_bg_6 = self.canvas.create_image(
            186.0,
            277.0,
            image=self.entry_image_6
        )
        entry_6 = Entry(
            self,
            textvariable=self.data['lesson'],
            bd=0,
            bg="#B27B97",
            fg="#000716",
            highlightthickness=0
        )
        entry_6.place(
            x=57.0,
            y=255.0,
            width=258.0,
            height=42.0
        )

        self.canvas.create_text(
            59.0,
            236.0,
            anchor="nw",
            text="Lessons:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

        self.canvas.create_text(
            57.0,
            153.0,
            anchor="nw",
            text="Teacher:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

        self.canvas.create_text(
            59.0,
            70.0,
            anchor="nw",
            text="Subject:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

        self.canvas.create_text(
            362.0,
            129.0,
            anchor="nw",
            text="Class Hours:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

        self.canvas.create_text(
            362.0,
            219.0,
            anchor="nw",
            text="Class Code:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

        self.canvas.create_text(
            362.0,
            322.0,
            anchor="nw",
            text="Class Availability:",
            fill="#000000",
            font=("InriaSerif Regular", 14 * -1)
        )

     def initialize(self):
        self.product_data = db_controller.get_class()  # type: ignore
        self.selected_r_id = self.parent.selected_rid
        #self.product_data = self.parent.product_data

         # Filter out all reservations for selected id reservation
        if self.product_data is not None:
            self.selected_product_data = list(
                filter(lambda x: str(x[0]) == self.selected_r_id, self.product_data)
            )

            if self.selected_product_data:
                self.selected_product_data = self.selected_product_data[0]

                self.canvas.itemconfigure(self.id_text, text=self.selected_product_data[0])
                self.data["subject"].set(self.selected_product_data[1])
                self.data["teacher"].set(self.selected_product_data[2])
                self.data["class_time"].set(self.selected_product_data[3])
                self.data["class_code"].set(self.selected_product_data[4])
                self.data["lesson"].set(self.selected_product_data[5])
                self.data["class_availability"].set(self.selected_product_data[6])
                
     def handle_update(self):
        result = db_controller.update_class( 
            self.selected_r_id,
            subject=self.data["subject"].get(),
            teacher=self.data["teacher"].get(),
            class_time=self.data["class_time"].get(),
            class_code=self.data["class_code"].get(),  
            lesson=self.data["lesson"].get(),    
            class_availability=self.data["class_availability"].get(),
                  
        )

            # Check if the update was successful
        if result:
            messagebox.showinfo("Success", "Details updated successfully")
            # Navigate back to the view window
            self.parent.navigate("view")
            # Refresh the view window to update the Treeview
            self.parent.windows.get("view").handle_refresh()
            # Clear all fields in the update frame
            for label in self.data.keys():
                self.data[label].set("")
        else:
            messagebox.showerror("Error", "Failed to update details")

     def clear_entries(self):
        # Iterate over all entry fields and set their values to an empty string
        for var in self.data.values():
            var.set("")